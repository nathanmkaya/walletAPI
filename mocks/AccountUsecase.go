// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "github/nathanmkaya/walletAPI/pkg/entity"
import mock "github.com/stretchr/testify/mock"

// AccountUsecase is an autogenerated mock type for the AccountUsecase type
type AccountUsecase struct {
	mock.Mock
}

// CheckBalance provides a mock function with given fields: Id
func (_m *AccountUsecase) CheckBalance(Id int) (float64, error) {
	ret := _m.Called(Id)

	var r0 float64
	if rf, ok := ret.Get(0).(func(int) float64); ok {
		r0 = rf(Id)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccount provides a mock function with given fields: a
func (_m *AccountUsecase) CreateAccount(a entity.Account) (int, error) {
	ret := _m.Called(a)

	var r0 int
	if rf, ok := ret.Get(0).(func(entity.Account) int); ok {
		r0 = rf(a)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Account) error); ok {
		r1 = rf(a)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountById provides a mock function with given fields: Id
func (_m *AccountUsecase) GetAccountById(Id int) (*entity.Account, error) {
	ret := _m.Called(Id)

	var r0 *entity.Account
	if rf, ok := ret.Get(0).(func(int) *entity.Account); ok {
		r0 = rf(Id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MiniStatement provides a mock function with given fields: Id
func (_m *AccountUsecase) MiniStatement(Id int) (entity.Statement, error) {
	ret := _m.Called(Id)

	var r0 entity.Statement
	if rf, ok := ret.Get(0).(func(int) entity.Statement); ok {
		r0 = rf(Id)
	} else {
		r0 = ret.Get(0).(entity.Statement)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
