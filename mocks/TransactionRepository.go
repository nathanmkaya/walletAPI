// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import entity "github/nathanmkaya/walletAPI/pkg/entity"
import mock "github.com/stretchr/testify/mock"

// TransactionRepository is an autogenerated mock type for the TransactionRepository type
type TransactionRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: p
func (_m *TransactionRepository) Create(p entity.Transaction) (int, error) {
	ret := _m.Called(p)

	var r0 int
	if rf, ok := ret.Get(0).(func(entity.Transaction) int); ok {
		r0 = rf(p)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(entity.Transaction) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *TransactionRepository) Delete(id int) (bool, error) {
	ret := _m.Called(id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int) bool); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Fetch provides a mock function with given fields: num
func (_m *TransactionRepository) Fetch(num int) ([]*entity.Transaction, error) {
	ret := _m.Called(num)

	var r0 []*entity.Transaction
	if rf, ok := ret.Get(0).(func(int) []*entity.Transaction); ok {
		r0 = rf(num)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(num)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: id
func (_m *TransactionRepository) GetByID(id int) (*entity.Transaction, error) {
	ret := _m.Called(id)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(int) *entity.Transaction); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: p
func (_m *TransactionRepository) Update(p *entity.Transaction) (*entity.Transaction, error) {
	ret := _m.Called(p)

	var r0 *entity.Transaction
	if rf, ok := ret.Get(0).(func(*entity.Transaction) *entity.Transaction); ok {
		r0 = rf(p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*entity.Transaction) error); ok {
		r1 = rf(p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
